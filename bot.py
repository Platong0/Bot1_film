# --- –í–°–¢–ê–í–¨ –í –ù–ê–ß–ê–õ–ï ---
import random
import asyncio
import logging
import sys
import re
import wikipedia

from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, URLInputFile, FSInputFile
from aiogram.exceptions import TelegramNetworkError
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import TOKEN
from commands import BOT_COMMANDS, FILMS_COMMAND, FILM_SEARCH_COMMAND, FILM_FILTER_COMMAND
from data import get_films, fetch_and_save_film_from_wiki
from keyboards import films_keyboard_markup, FilmCallback
from models import Film
from external import async_log_function_call
from handlers import info

import sys
import os

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from external import async_log_function_call


# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ Wikipedia
wikipedia.set_lang("uk")

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
class FilmForm(StatesGroup):
    name = State()
    description = State()
    rating = State()
    genre = State()
    actors = State()
    poster = State()

class MovieStates(StatesGroup):
    search_query = State()
    filter_criteria = State()
    delete_query = State()
    edit_query = State()
    edit_description = State()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def is_valid_url(url: str) -> bool:
    return re.match(r'^https?://', url or '') is not None

def safe_get_films(film_id=None):
    try:
        result = get_films(film_id=film_id)
        if not result:
            logging.warning("get_films –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ.")
            return None if film_id else []
        return result
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ñ—ñ–ª—å–º—ñ–≤: {e}")
        return None if film_id else []

async def send_film_photo(message_or_cb, film: Film, text: str):
    poster_url = film.poster or "no-image.png"

    try:
        if poster_url == "no-image.png":
            await message_or_cb.answer_photo(
                photo=FSInputFile("no-image.png"),
                caption=text
            )
        elif is_valid_url(poster_url):
            await message_or_cb.answer_photo(
                photo=URLInputFile(poster_url),
                caption=text
            )
        else:
            await message_or_cb.answer_photo(
                photo=FSInputFile("no-image.png"),
                caption=text
            )
    except TelegramNetworkError:
        await message_or_cb.answer_photo(
            photo=FSInputFile("no-image.png"),
            caption=text
        )

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Dispatcher ---
dp = Dispatcher()
dp.include_router(info.router)

# --- –•—ç–Ω–¥–ª–µ—Ä—ã ---
@dp.message(FILMS_COMMAND)
@async_log_function_call
async def films_list(message: Message) -> None:
    data = safe_get_films()
    markup = films_keyboard_markup(films_list=data)
    await message.answer(
        "–ü–µ—Ä–µ–ª—ñ–∫ —Ñ—ñ–ª—å–º—ñ–≤. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –Ω–∞–∑–≤—É —Ñ—ñ–ª—å–º—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π.",
        reply_markup=markup
    )

@dp.callback_query(FilmCallback.filter())
@async_log_function_call
async def callb_film(callback: CallbackQuery, callback_data: FilmCallback) -> None:
    film_data = safe_get_films(film_id=callback_data.id)
    if not film_data:
        await callback.message.answer("–§—ñ–ª—å–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    try:
        film = Film(**film_data)
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ Film: {e}\n–î–∞–Ω—ñ: {film_data}")
        await callback.message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ü–µ–π —Ñ—ñ–ª—å–º.")
        return

    text = (
        f"–§—ñ–ª—å–º: {film.name}\n"
        f"–û–ø–∏—Å: {film.description}\n"
        f"–†–µ–π—Ç–∏–Ω–≥: {film.rating}\n"
        f"–ñ–∞–Ω—Ä: {film.genre or '–ù–µ–≤—ñ–¥–æ–º–æ'}\n"
        f"–ê–∫—Ç–æ—Ä–∏: {', '.join(film.actors) if film.actors else '–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö'}\n"
    )
    await send_film_photo(callback.message, film, text)

@dp.message(FILM_SEARCH_COMMAND)
@async_log_function_call
async def search_movie(message: Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ñ—ñ–ª—å–º—É –¥–ª—è –ø–æ—à—É–∫—É:")
    await state.set_state(MovieStates.search_query)

@dp.message(MovieStates.search_query)
@async_log_function_call
async def get_search_query(message: Message, state: FSMContext):
    query = message.text.lower()
    films = safe_get_films()
    results = [film for film in films if query in film['name'].lower()]

    if results:
        for film in results:
            await message.reply(f"–ó–Ω–∞–π–¥–µ–Ω–æ: {film['name']} - {film['description']}")
    else:
        await message.reply("–§—ñ–ª—å–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    await state.clear()

@dp.message(FILM_FILTER_COMMAND)
@async_log_function_call
async def filter_movies(message: Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥—ñ—Ç—å –∂–∞–Ω—Ä –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó:")
    await state.set_state(MovieStates.filter_criteria)

@dp.message(MovieStates.filter_criteria)
@async_log_function_call
async def get_filter_criteria(message: Message, state: FSMContext):
    films = safe_get_films()
    criteria = message.text.lower()
    filtered = [film for film in films if criteria in film['genre'].lower()]

    if filtered:
        for film in filtered:
            await message.reply(f"–ó–Ω–∞–π–¥–µ–Ω–æ: {film['name']} - {film['description']}")
    else:
        await message.reply("–§—ñ–ª—å–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —Ü–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏.")

    await state.clear()

@dp.message(Command("best_film"))
@async_log_function_call
async def best_film(message: Message):
    films = safe_get_films()
    if not films:
        await message.reply("–£ –±–∞–∑—ñ –Ω–µ–º–∞—î —Ñ—ñ–ª—å–º—ñ–≤.")
        return
    film = max(films, key=lambda film: film.get('rating') or 0)
    await message.reply(f"–ù–∞–π–∫—Ä–∞—â–∏–π —Ñ—ñ–ª—å–º: {film['name']} (–†–µ–π—Ç–∏–Ω–≥: {film['rating']})")

@dp.message(Command("random"))
@async_log_function_call
async def random_film(message: Message, state: FSMContext) -> None:
    films = safe_get_films()
    if not films:
        await message.answer("–£ –±–∞–∑—ñ –Ω–µ–º–∞—î —Ñ—ñ–ª—å–º—ñ–≤.")
        return

    film_data = random.choice(films)

    try:
        film = Film(**film_data)
    except Exception as e:
        logging.error(f"‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ñ—ñ–ª—å–º: {e}")
        await message.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ —Ñ—ñ–ª—å–º—É.")
        return

    text = (
        f"üé≤ –í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ñ—ñ–ª—å–º:\n\n"
        f"<b>–§—ñ–ª—å–º:</b> {film.name}\n"
        f"<b>–û–ø–∏—Å:</b> {film.description}\n"
        f"<b>–†–µ–π—Ç–∏–Ω–≥:</b> {film.rating}\n"
        f"<b>–ñ–∞–Ω—Ä:</b> {film.genre or '–ù–µ–≤—ñ–¥–æ–º–æ'}\n"
        f"<b>–ê–∫—Ç–æ—Ä–∏:</b> {', '.join(film.actors) if film.actors else '–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö'}"
    )
    await send_film_photo(message, film, text)
    await state.clear()

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main() -> None:
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    bot = Bot(
        token=TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    await bot.set_my_commands(BOT_COMMANDS)
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
